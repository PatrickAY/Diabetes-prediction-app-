# -*- coding: utf-8 -*-
"""Copy of Diabetes Prediction App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SISBdtnUTHumkuRe-xP6H9vex__nml4-

# Set up and Preprocessing
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/diabetes.csv')

df.info()
df.describe()

zero_columns = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
for column in zero_columns:
    df[column] = df[column].replace(0, np.nan)

df['Glucose'].fillna(df['Glucose'].mean(), inplace=True)
df['BloodPressure'].fillna(df['BloodPressure'].mean(), inplace=True)
df['SkinThickness'].fillna(df['SkinThickness'].mean(), inplace=True)
df['Insulin'].fillna(df['Insulin'].mean(), inplace=True)
df['BMI'].fillna(df['BMI'].mean(), inplace=True)

"""# Feature Engineerg"""

df['BMI_Age'] = df['BMI'] * df['Age']
df['Glucose_BMI'] = df['Glucose'] / (df['BMI'] + 1)
df['Freuency_Age_Ratio'] = df['Pregnancies'] / (df['Age'] + 1)

"""# Train-Test Split & Scaling"""

X = df.drop('Outcome', axis=1)
y = df['Outcome']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# Model Training"""

model = RandomForestClassifier(n_estimators=100, max_depth=20, min_samples_split=10, min_samples_leaf=2, random_state=42)
model.fit(X_train_scaled, y_train)

# Evaluate
y_pred = model.predict(X_test_scaled)
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
print(accuracy_score(y_test, y_pred))

from sklearn.model_selection import GridSearchCV, RandomizedSearchCV

# Hyperparameter grid
param_grid = {'n_estimators': [50, 100, 400],
  'max_depth': [None, 10, 20, 30],
  'min_samples_split': [2, 5, 10],
  'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train_scaled, y_train)

print(grid_search.best_params_)
print(grid_search.best_score_)

rf = RandomForestClassifier(random_state=42)

random_search = RandomizedSearchCV(
    estimator=rf, param_distributions=param_grid,
    n_iter=20,
    cv=5,
    verbose=2,
    random_state=42,
    n_jobs=-1,
    scoring='accuracy')

random_search.fit(X_train_scaled, y_train)

print("Best Parameters from RandomizedSearchCV:")
print(random_search.best_params_)
print(random_search.best_score_)

refined_model = {'n_estimators':
                 [random_search.best_params_['n_estimators']], 'max_depth':
                 [random_search.best_params_['max_depth']],
                 'min_samples_split':
                 [random_search.best_params_['min_samples_split']],
                 'min_samples_leaf':
                 [random_search.best_params_['min_samples_leaf']]
                 }

grid_search = GridSearchCV(estimator=model, param_grid=refined_model, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train_scaled, y_train)

print(grid_search.best_params_)
print(grid_search.best_score_)

"""# Save Model and Scaler"""

import joblib
joblib.dump(grid_search.best_estimator_, 'diabetes_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
joblib.dump(X.columns.tolist(), 'model_columns.pkl')

"""# Gradio App with Prediction Probability Chart"""

import gradio as gr
import matplotlib.pyplot as plt


import gradio as gr
import matplotlib.pyplot as plt
import joblib # Assuming joblib is used for loading

# Load everything
model = joblib.load("diabetes_model.pkl")
scaler = joblib.load("scaler.pkl")
columns = joblib.load("model_columns.pkl")

def predict_diabetes(preg, glucose, bp, skin, insulin, bmi, dpf, age):
    try:
        # Feature Engineering
        BMI_Age = bmi * age
        Glucose_BMI = glucose / (bmi + 1)
        Pregnancy_Age_Ratio = preg / (age + 1)

        data_dict = {
            'Pregnancies': preg,
            'Glucose': glucose,
            'BloodPressure': bp,
            'SkinThickness': skin,
            'Insulin': insulin,
            'BMI': bmi,
            'DiabetesPedigreeFunction': dpf,
            'Age': age,
            'BMI_Age': BMI_Age,
            'Glucose_BMI': Glucose_BMI,
            'Pregnancy_Age_Ratio': Pregnancy_Age_Ratio
        }

        for col in columns:
            if col not in data_dict:
                data_dict[col] = 0.0

        input_data = [data_dict[col] for col in columns]
        input_scaled = scaler.transform([input_data])

        probas = model.predict_proba(input_scaled)[0]
        prediction = model.predict(input_scaled)[0]

        # Risk category
        if probas[1] >= 0.75:
            risk_level = "ðŸ”´ High Risk"
        elif probas[1] >= 0.5:
            risk_level = "ðŸŸ  Moderate Risk"
        else:
            risk_level = "ðŸŸ¢ Low Risk"

        # Health tips
        tips = []
        if glucose > 130:
             tips.append("High glucose level â€“ consider reducing sugar intake.")
        if bmi > 30:
             tips.append("Your BMI is quite high â€“ regular exercise is recommended.")
        if bp < 60 or bp > 120:
             tips.append("Blood pressure is outside normal range â€“ monitor closely.")
        if insulin > 200:
             tips.append("Insulin level is high â€“ may indicate insulin resistance.")
        if dpf > 1:
             tips.append("Family history risk detected â€“ regular screening advised.")

        tips_text = "\n".join(tips) if tips else " No critical health flags based on input."


        # Plot
        fig, ax = plt.subplots()
        ax.bar(["Not Diabetic", "Diabetic"], probas, color=['green', 'red'])
        ax.set_ylim([0, 1])
        ax.set_ylabel("Probability")
        ax.set_title("Prediction Confidence")
        plt.tight_layout()

        label = "Likely Diabetic" if prediction == 1 else "Not Diabetic"
        full_result = f"{label} ({risk_level})\n\n Tips:\n{tips_text}"
        return full_result, fig

    except Exception as e:
        return f"Error: {str(e)}", None

#Gradio Interface
interface = gr.Interface(
    fn=predict_diabetes,
    inputs=[
        gr.Number(label="Pregnancies"),
        gr.Number(label="Glucose"),
        gr.Number(label="Blood Pressure"),
        gr.Number(label="Skin Thickness"),
        gr.Number(label="Insulin"),
        gr.Number(label="BMI"),
        gr.Number(label="Diabetes Pedigree Function"),
        gr.Number(label="Age")
    ],
    outputs=["text", gr.Plot()],
    title="Diabetes Prediction App",
    description="Enter patient data to predict diabetes with confidence chart."
)

interface.launch(share=True)